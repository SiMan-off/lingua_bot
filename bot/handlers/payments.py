"""Payment handlers"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from bot.database import db
from bot.services.payment import PaymentService
from bot.keyboards.inline import get_payment_keyboard, get_main_menu_keyboard
from bot.utils.messages import get_text

logger = logging.getLogger(__name__)
router = Router()

class PaymentStates(StatesGroup):
    waiting_for_payment = State()

payment_service = PaymentService()

@router.callback_query(F.data.startswith("buy_"))
async def handle_subscription_purchase(callback: CallbackQuery, state: FSMContext):
    """Handle subscription purchase"""
    subscription_type = callback.data[4:]  # Remove "buy_" prefix

    if subscription_type not in ["monthly", "yearly"]:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return

    user_info = await db.get_user(callback.from_user.id)

    if user_info.get('is_premium'):
        await callback.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞!", show_alert=True)
        return

    # Get subscription details
    amount = payment_service.get_subscription_price(subscription_type)
    description = payment_service.get_subscription_description(subscription_type)

    # Create payment
    payment_data = await payment_service.create_payment(
        user_id=callback.from_user.id,
        subscription_type=subscription_type,
        amount=amount,
        description=description
    )

    if not payment_data:
        # Check if it's a configuration issue
        from config import config
        if (not config.YOOKASSA_SHOP_ID or not config.YOOKASSA_SECRET_KEY or
            config.YOOKASSA_SHOP_ID == "your_shop_id" or
            config.YOOKASSA_SECRET_KEY == "your_secret_key"):
            error_text = "‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\nüîß –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã YooKassa."
        else:
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

        await callback.message.edit_text(
            error_text,
            reply_markup=get_main_menu_keyboard(False)
        )
        await callback.answer()
        return

    # Save payment info in state
    await state.update_data(
        payment_id=payment_data["payment_id"],
        subscription_type=subscription_type,
        amount=amount
    )
    await state.set_state(PaymentStates.waiting_for_payment)

    # Send payment message
    payment_text = f"""üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏*

üì¶ –¢–∏–ø: {description}
üí∞ –°—É–º–º–∞: {amount}‚ÇΩ
üîë ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_data["payment_id"]}`

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."""

    await callback.message.edit_text(
        payment_text,
        parse_mode='Markdown',
        reply_markup=get_payment_keyboard(payment_data["confirmation_url"])
    )

    await callback.answer("üí≥ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ...")

@router.callback_query(F.data == "check_payment", PaymentStates.waiting_for_payment)
async def check_payment_status(callback: CallbackQuery, state: FSMContext):
    """Check payment status manually"""
    state_data = await state.get_data()
    payment_id = state_data.get("payment_id")

    if not payment_id:
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # Check payment status
    payment_status = await payment_service.check_payment_status(payment_id)

    if not payment_status:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
        return

    if payment_status["paid"]:
        # Payment successful - activate subscription
        subscription_type = state_data.get("subscription_type")
        amount = state_data.get("amount")

        success = await db.activate_subscription(
            user_id=callback.from_user.id,
            subscription_type=subscription_type,
            payment_id=payment_id,
            amount=amount
        )

        if success:
            await state.clear()

            success_text = f"""‚úÖ *–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*

üéâ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!
üíé –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:
‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
‚Ä¢ –ò–ò-—É–ª—É—á—à–µ–Ω–∏—è

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè"""

            await callback.message.edit_text(
                success_text,
                parse_mode='Markdown',
                reply_markup=get_main_menu_keyboard(True)
            )

            await callback.answer("üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
    else:
        status_text = f"‚è≥ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {payment_status['status']}\n\n–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω."
        await callback.answer(status_text, show_alert=True)

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", PaymentStates.waiting_for_payment)
async def check_payment_message(message: Message, state: FSMContext):
    """Check payment via message"""
    state_data = await state.get_data()
    payment_id = state_data.get("payment_id")

    if not payment_id:
        await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # Check payment status
    payment_status = await payment_service.check_payment_status(payment_id)

    if not payment_status:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞")
        return

    if payment_status["paid"]:
        # Payment successful
        subscription_type = state_data.get("subscription_type")
        amount = state_data.get("amount")

        success = await db.activate_subscription(
            user_id=message.from_user.id,
            subscription_type=subscription_type,
            payment_id=payment_id,
            amount=amount
        )

        if success:
            await state.clear()
            await message.answer(
                "‚úÖ –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! üéâ",
                reply_markup=get_main_menu_keyboard(True)
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    else:
        await message.answer(
            f"‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.\n–°—Ç–∞—Ç—É—Å: {payment_status['status']}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

# Webhook handler (for production)
async def process_payment_webhook(webhook_data: dict):
    """Process payment webhook from YooKassa"""
    try:
        result = await payment_service.process_webhook(webhook_data)

        if result and result["event"] == "payment_succeeded":
            user_id = result["user_id"]
            subscription_type = result["subscription_type"]
            payment_id = result["payment_id"]
            amount = result["amount"]

            # Activate subscription
            success = await db.activate_subscription(
                user_id=user_id,
                subscription_type=subscription_type,
                payment_id=payment_id,
                amount=amount
            )

            if success:
                logger.info(f"Premium subscription activated for user {user_id}")
                # You could send a notification message here
                return True
            else:
                logger.error(f"Failed to activate subscription for user {user_id}")

        return False

    except Exception as e:
        logger.error(f"Webhook processing error: {e}")
        return False