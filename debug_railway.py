#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Railway –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import traceback

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway...\n")

    required_vars = [
        "BOT_TOKEN",
        "PORT"
    ]

    optional_vars = [
        "OPENAI_API_KEY",
        "YOOKASSA_SHOP_ID",
        "YOOKASSA_SECRET_KEY",
        "WEBHOOK_HOST",
        "RAILWAY_STATIC_URL",
        "RAILWAY_PUBLIC_URL"
    ]

    print("üìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    missing_required = []
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ({len(value)} —Å–∏–º–≤–æ–ª–æ–≤)")
        else:
            print(f"  ‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
            missing_required.append(var)

    print("\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var in optional_vars:
        value = os.getenv(var)
        if value:
            print(f"  ‚úÖ {var}: {value[:50]}...")
        else:
            print(f"  ‚ö™ {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    if missing_required:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ù–û: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_required)}")
        return False
    else:
        print(f"\n‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...\n")

    modules = [
        ("aiogram", "Telegram Bot API"),
        ("aiohttp", "HTTP —Å–µ—Ä–≤–µ—Ä"),
        ("openai", "OpenAI API"),
        ("yookassa", "–Æ–ö–∞—Å—Å–∞ API"),
        ("aiosqlite", "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"),
        ("python-dotenv", "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    ]

    failed_imports = []

    for module, description in modules:
        try:
            __import__(module.replace("-", "_"))
            print(f"  ‚úÖ {module}: {description}")
        except ImportError as e:
            print(f"  ‚ùå {module}: –ù–ï –ù–ê–ô–î–ï–ù - {description}")
            failed_imports.append(module)

    if failed_imports:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: {', '.join(failed_imports)}")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ requirements.txt –∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return False
    else:
        print(f"\n‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return True

def check_bot_token():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...\n")

    token = os.getenv("BOT_TOKEN")
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    if ":" not in token:
        print("‚ùå BOT_TOKEN –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        print("üí° –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: 1234567890:ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghi")
        return False

    bot_id, bot_hash = token.split(":", 1)

    if not bot_id.isdigit():
        print("‚ùå Bot ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
        return False

    if len(bot_hash) < 30:
        print("‚ùå Bot hash —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
        return False

    print(f"‚úÖ –¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (Bot ID: {bot_id})")
    return True

def test_bot_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API"""
    print("\nüîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram...\n")

    try:
        from aiogram import Bot
        import asyncio

        async def test_bot():
            token = os.getenv("BOT_TOKEN")
            if not token:
                return False, "–¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"

            try:
                bot = Bot(token=token)
                me = await bot.get_me()
                await bot.session.close()
                return True, f"–ë–æ—Ç @{me.username} ({me.first_name})"
            except Exception as e:
                return False, str(e)

        result, info = asyncio.run(test_bot())

        if result:
            print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: {info}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {info}")
            return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def check_port():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞...\n")

    port = os.getenv("PORT", "8080")

    try:
        port_num = int(port)
        if 1 <= port_num <= 65535:
            print(f"‚úÖ –ü–æ—Ä—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {port_num}")
            return True
        else:
            print(f"‚ùå –ü–æ—Ä—Ç –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {port_num}")
            return False
    except ValueError:
        print(f"‚ùå –ü–æ—Ä—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: {port}")
        return False

def main():
    print("üöÇ Railway –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PolyglotAI44\n")
    print("="*50)

    checks = [
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_environment),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", check_imports),
        ("–ü–æ—Ä—Ç", check_port),
        ("–¢–æ–∫–µ–Ω –±–æ—Ç–∞", check_bot_token),
        ("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram", test_bot_connection)
    ]

    results = []

    for name, check_func in checks:
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}")
            traceback.print_exc()
            results.append((name, False))

    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:\n")

    passed = 0
    for name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{status}: {name}")
        if result:
            passed += 1

    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == len(results):
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.")
    else:
        print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ requirements.txt")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ BOT_TOKEN –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π")

if __name__ == "__main__":
    main()